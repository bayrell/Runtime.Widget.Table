/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Table;

use Runtime.BaseObject;
use Runtime.Callback;
use Runtime.Serializer;
use Runtime.Web.BaseWidget;
use Runtime.Widget.Button;
use Runtime.Widget.ButtonModel;
use Runtime.Widget.Dialog.DialogModel;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Table.SaveDialog;
use Runtime.Widget.Table.TableModel;


class SaveDialogModel extends BaseWidget
{
	string widget_name = "save_dialog";
	string component = classof SaveDialog;
	FormModel form = null;
	TableModel table = null;
	DialogModel dialog = new DialogModel;
	
	
	/**
	 * Constructor
	 */
	void constructor(Map params = null)
	{
		parent(params);
		
		if (params)
		{
			if (params.has("form")) this.form = params.get("form");
			if (params.has("table")) this.table = params.get("table");
		}
		
		/* Setup dialog */
		this.dialog.title = "Add item";
		this.dialog.buttons.styles.add("align-end");
		
		/* Setup close buttons */
		ButtonModel close_button = this.dialog.buttons.add(new ButtonModel{
			"content": "Cancel",
			"styles": [
				"gray"
			],
		});
		close_button.events.add("onClick", new Callback(this, "onCloseButtonClick"));
		
		/* Setup confirm button */
		ButtonModel confirm_button = this.dialog.buttons.add(new ButtonModel{
			"content": "Save",
			"styles": [
				"primary"
			],
		});
		confirm_button.events.add("onClick", new Callback(this, "onConfirmButtonClick"));
	}
	
	
	/**
	 * On click
	 */
	async void onClick(Dict data = null)
	{
		int row_number = -1;
		if (data != null and data.has("row_number"))
		{
			row_number = data.get("row_number");
		}
		
		/* Clear form */
		this.form.clear();
		
		/* Add item */
		if (row_number == -1)
		{
			this.dialog.title = this.form.getPageTitle("add");
			this.form.setAction("add");
		}
		
		/* Edit item */
		else
		{
			/* Set item */
			Dict item = this.table.getItemByRowNumber(row_number);
			item = Serializer::copy(item);
			this.form.storage.setItem(item);
			
			/* Set primary key */
			Map pk = this.form.getPrimaryKey();
			this.form.storage.setPrimaryKey(pk);
			
			/* Set title */
			this.dialog.title = this.form.getPageTitle("edit");
			this.form.setAction("edit");
		}
		
		/* Show dialog */
		this.dialog.show();
	}
	
	
	/**
	 * On close button click
	 */
	void onCloseButtonClick()
	{
		this.dialog.hide();
	}
	
	
	/**
	 * On confirm button click
	 */
	async void onConfirmButtonClick()
	{
		await this.form.save();
		if (this.form.storage.error.isSuccess())
		{
			this.dialog.hide();
			await this.table.refresh();
		}
	}
}
